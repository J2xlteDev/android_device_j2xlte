diff --git a/include/media/openmax/OMX_IVCommon.h b/include/media/openmax/OMX_IVCommon.h
index f9b6f4b..4934a2e 100644
--- a/include/media/openmax/OMX_IVCommon.h
+++ b/include/media/openmax/OMX_IVCommon.h
@@ -170,6 +170,7 @@ typedef enum OMX_COLOR_FORMATTYPE {
     OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03,
     OMX_SEC_COLOR_FormatNV12Tiled = 0x7FC00002,
     OMX_QCOM_COLOR_FormatYUV420PackedSemiPlanar32m = 0x7FA30C04,
+    OMX_SPRD_COLOR_FormatYVU420SemiPlanar = 0x7FD00001,
     OMX_COLOR_FormatMax = 0x7FFFFFFF
 } OMX_COLOR_FORMATTYPE;
 
diff --git a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp
index 3efebf7..ca02393 100644
--- a/libs/binder/IPCThreadState.cpp
+++ b/libs/binder/IPCThreadState.cpp
@@ -1136,6 +1136,12 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
         mProcess->spawnPooledThread(false);
         break;
 
+    // SPRD: Sometimes, doing binder operation in destructor could reveiving BR_TRANSACTION_COMPLETE here.
+    //       We handle this command simply and avoid crash.
+    case BR_TRANSACTION_COMPLETE:
+        ALOGE("*** BAD COMMAND: BR_TRANSACTION_COMPLETE(%x) for executeCommand from Binder driver\n", cmd);
+        break;
+
     default:
         printf("*** BAD COMMAND %d received from Binder driver\n", cmd);
         result = UNKNOWN_ERROR;
diff --git a/services/surfaceflinger/Android.mk b/services/surfaceflinger/Android.mk
index 18cc946..e4b90c3 100644
--- a/services/surfaceflinger/Android.mk
+++ b/services/surfaceflinger/Android.mk
@@ -134,6 +134,10 @@ else
     LOCAL_CFLAGS += -DMAX_VIRTUAL_DISPLAY_DIMENSION=0
 endif
 
+ifeq ($(strip $(TARGET_GPU_NOT_SUPPORT_NV12_OUTPUT)),true)
+    LOCAL_CFLAGS += -DGPU_NOT_SUPPORT_NV12_OUTPUT
+endif
+
 ifeq ($(BOARD_USE_BGRA_8888),true)
     LOCAL_CFLAGS += -DUSE_BGRA_8888
 endif
diff --git a/services/surfaceflinger/DisplayDevice.cpp b/services/surfaceflinger/DisplayDevice.cpp
index 92c5e12..4ec9770 100644
--- a/services/surfaceflinger/DisplayDevice.cpp
+++ b/services/surfaceflinger/DisplayDevice.cpp
@@ -121,7 +121,33 @@ DisplayDevice::DisplayDevice(
         config = RenderEngine::chooseEglConfig(display, format);
 #endif
     }
-    eglSurface = eglCreateWindowSurface(display, config, window, NULL);
+    
+    /*
+     *  Sprd change here:
+     *  Enable EGL NV12 config for GPU output NV12 image, for
+     *  VirtualDisplay.
+     * */
+#ifndef GPU_NOT_SUPPORT_NV12_OUTPUT
+    if (mType >= DisplayDevice::DISPLAY_VIRTUAL)
+    {
+        EGLConfig nv12Config;
+        EGLint numConfigs = 0;
+        static EGLint sDefaultConfigAttribs[] = {
+            EGL_CONFIG_ID, 43, EGL_NONE };
+        eglChooseConfig(display, sDefaultConfigAttribs, &nv12Config, 1, &numConfigs);
+        eglSurface = eglCreateWindowSurface(display, nv12Config, window, NULL);
+
+        /*
+         * Sync Framebuffer format to VirtualDisplay Surface.
+         * */
+        format = mDisplaySurface->getFBFormat();
+        native_window_set_buffers_format(window, format);
+    }
+    else
+#endif
+    {
+        eglSurface = eglCreateWindowSurface(display, config, window, NULL);
+    }
     eglQuerySurface(display, eglSurface, EGL_WIDTH,  &mDisplayWidth);
     eglQuerySurface(display, eglSurface, EGL_HEIGHT, &mDisplayHeight);
 
diff --git a/services/surfaceflinger/DisplayHardware/DisplaySurface.h b/services/surfaceflinger/DisplayHardware/DisplaySurface.h
index d801bb3..4444be7 100644
--- a/services/surfaceflinger/DisplayHardware/DisplaySurface.h
+++ b/services/surfaceflinger/DisplayHardware/DisplaySurface.h
@@ -78,8 +78,16 @@ public:
 
     virtual const sp<Fence>& getClientTargetAcquireFence() const = 0;
 
+    inline int getFBFormat() const
+    {
+        return mFBFormat;
+    }
+
 protected:
-    DisplaySurface() {}
+    int mFBFormat;
+    DisplaySurface()
+    : mFBFormat(HAL_PIXEL_FORMAT_RGBA_8888)
+    {}
     virtual ~DisplaySurface() {}
 };
 
diff --git a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
index 1cef4fd..5dc22f7 100644
--- a/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
+++ b/services/surfaceflinger/DisplayHardware/VirtualDisplaySurface.cpp
@@ -90,6 +90,7 @@ VirtualDisplaySurface::VirtualDisplaySurface(HWComposer& hwc, int32_t dispId,
     // with GLES. If the consumer needs CPU access, use the default format
     // set by the consumer. Otherwise allow gralloc to decide the format based
     // on usage bits.
+#if 0
     int sinkUsage;
     sink->query(NATIVE_WINDOW_CONSUMER_USAGE_BITS, &sinkUsage);
     if (sinkUsage & (GRALLOC_USAGE_SW_READ_MASK | GRALLOC_USAGE_SW_WRITE_MASK)) {
@@ -99,7 +100,22 @@ VirtualDisplaySurface::VirtualDisplaySurface(HWComposer& hwc, int32_t dispId,
     } else {
         mDefaultOutputFormat = HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED;
     }
+#else
+    int sinkFormat;
+    sink->query(NATIVE_WINDOW_FORMAT, &sinkFormat);
+    mDefaultOutputFormat = sinkFormat;
+#endif
     mOutputFormat = mDefaultOutputFormat;
+    if (sForceHwcCopy)
+    {
+        int scratchFormat;
+        bqProducer->query(NATIVE_WINDOW_FORMAT, &scratchFormat);
+        mFBFormat = scratchFormat;
+    }
+    else
+    {
+        mFBFormat = mDefaultOutputFormat;
+    }
 
     ConsumerBase::mName = String8::format("VDS: %s", mDisplayName.string());
     mConsumer->setConsumerName(ConsumerBase::mName);
